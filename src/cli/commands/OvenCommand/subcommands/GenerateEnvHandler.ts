import { readFileSync, writeFileSync } from "fs";
import { injectable } from "inversify";
import { safeLoad } from "js-yaml";
import { join } from "path";
import { ConfigFacade } from "../../../../shared/helpers/injectableServices/Config.service";
import { LoggerService } from "../../../../shared/helpers/injectableServices/Logger.service";
import { PathResolverService } from "../../../../shared/helpers/injectableServices/PathResolver.service";
import { distinct } from "../../../../shared/helpers/Utils";

@injectable()
export class GenerateEnvHandler {
  constructor(
    private logger: LoggerService,
    private config: ConfigFacade,
    private pathResolver: PathResolverService
  ) {}

  handle() {
    const envFile = this.config
      .expose()
      .services.map((service) => {
        const pathDc = join(process.cwd(), service.dcompose);
        const fileContent = readFileSync(pathDc).toString();
        const parsedDc = safeLoad(fileContent) as any;
        return parsedDc?.services[service.name]?.environment || [];
      })
      .reduce((acc, newEnvs) => [...acc, ...newEnvs], [])
      // Filter out all the fixed values
      .filter((env: string) => !!env.match(/\$\{/g));

    writeFileSync(
      this.pathResolver.envExamplePath(),
      distinct(["#Autogenerated, do not edit", ...envFile]).join("\n")
    );
    this.logger.plain(
      "Created an example.env file from the project services, do not change this file. Copy it in a .env file"
    );
  }
}
